require 'open-uri'
require 'json'
require 'logger'

path = File.dirname(File.dirname(File.expand_path(__FILE__)))

module Geturls			# The methods defined here will be called to get urls from different API's
				# to dump those urls into the app_db
FL_MR = 500
SM_MR = 100
FI_MR = 100

Log = Logger.new("#{path}/log/geturl_log.log")
	
	def Geturls.fromFlickr (search_word, limit) 		#limit tells how many urls  
				                    		#are to be searched	
		pages = limit/FL_MR + 1		
		counter = 0
		picUrlString = ""
		pages.times do |page|
			page = page + 1 
			json = JSON.parse(open("http://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=510f1250100da2839e65772ce28fce10&tags=#{search_word}&format=json&nojsoncallback=1&page=#{page}&per_page=500&content_type=1&safe_search=1").read)
			pics = json["photos"]["photo"]
			pics.each do |pic|
				if counter >= limit then break end
				counter += 1
				secret = pic["secret"]
				server = pic["server"] 
				id = pic["id"]
				url = "http://farm9.staticflickr.com/#{server}/#{id}_#{secret}_b.jpg"
				picUrlString = picUrlString + url + "|" + "flickr" + ","
						
			end
		if counter >= limit then break end
		end
		rescue => e
			Log.debug "some error in Flickr method at : #{nexturl}\n" 
		ensure
			Log.debug "images fetched are #{counter} for #{search_word} from Flickr"	
		return picUrlString
	end
	
	def Geturls.fromFive (search_word, limit) 		#limit tells how many urls  
                                                    		#are to be searched 
                pages = limit/FI_MR + 1
                counter = 0
		picUrlString = ""
                pages.times do |page|
                        page = page + 1
                        json = JSON.parse(open("https://api.500px.com/v1/photos/search?tag=#{search_word}&consumer_key=0qZ6Mzm0cVzOh2jbS2d1NuKtE3eYXcNhSL9OgPsA&page=#{page}&rpp=100").read)
                        pics = json["photos"]
                        pics.each do |pic|
                                if counter >= limit then break end
                                counter += 1
                                url = pic["image_url"]
                                picUrlString = picUrlString + url + "|" + "500px" + ","
                        end
                if counter >= limit then break end
                end
		rescue => e
			Log.debug "some error in 500px method at : #{nexturl}\n" 
		ensure
			Log.debug "images fetched are #{counter} for #{search_word} from 500px"	
		return picUrlString
	end			
	
	def Geturls.fromInstagram (search_word, limit)		 #limit tells how many urls  
                                                       		 #are to be searched 
                counter = 0
		picUrlString = ""
		nexturl = "https://api.instagram.com/v1/tags/#{search_word}/media/recent?access_token=294775657.bd2837c.296a258a3b62498d81ed550768157c64&page=1"
                while counter < limit
                        json = JSON.parse(open(nexturl).read)
                        pics = json["data"]
			nexturl = json["pagination"]["next_url"]
                        pics.each do |pic|
                                if counter >= limit then break end
				counter += 1                               
				url = pic["images"]["low_resolution"]["url"]
                                picUrlString = picUrlString + url + "|" + "instagram" + ","
                        end
                	if counter >= limit then break end
                end
		rescue => e
			Log.debug "some error in Insta method at : #{nexturl}\n" 
		ensure
			Log.debug "images fetched are #{counter} for #{search_word} from instagram"			
			return picUrlString
	end
	
	def Geturls.fromSmugmug (search_word, limit) 		#limit tells how many urls  
                                                     		#are to be searched 
                offset = 0
                counter = 0
		picUrlString = ""
                while counter < limit
                        json = JSON.parse(open("http://www.smugmug.com/services/api/json/1.4.0/?Query=#{search_word}&Size=100&SortBy=relevance&method=rpc.search.images&Start=#{offset}").read)
                        pics = json["Akamai"]
                        pics.each do |pic|
                                if counter >= limit then break end
				counter += 1                               
				url = pic.gsub("PreFetchURL=","")
                                picUrlString = picUrlString + url + "|" + "smugmug" + ","
                        end
			offset +=counter
                end
		rescue => e
			Log.debug "some error in Smugmug method at : #{nexturl}\n" 
		ensure
			Log.debug "images fetched are #{counter} for #{search_word} from Smugmug"	
		return picUrlString
	end
end
	
